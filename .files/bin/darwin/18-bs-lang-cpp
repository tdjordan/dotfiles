#!/usr/bin/env bash

# update brew
brew update

# which clang version
#ver=3.7

# go ninja go
brew install ninja

# Bash completion has been installed to:
#   /usr/local/etc/bash_completion.d
#
# zsh completions have been installed to:
#   /usr/local/share/zsh/site-functions


# install clang support
#sudo apt-get install -y libllvm$ver-dbg
#sudo apt-get install -y llvm-$ver-doc
#sudo apt-get install -y llvm-$ver-examples
#sudo apt-get install -y llvm-$ver-tools
#sudo apt-get install -y libclang1-$ver-dbg
#sudo apt-get install -y libclang-$ver-dev
#sudo apt-get install -y clang-$ver-doc
#sudo apt-get install -y clang-$ver-examples
#sudo apt-get install -y clang-format-$ver
brew install clang-format
#sudo apt-get install -y clang-modernize-$ver
#sudo apt-get install -y python-clang-$ver
#sudo apt-get install -y lldb-$ver-dev
#sudo apt-get install -y liblldb-$ver-dbg
#sudo apt-get install -y libllvm-$ver-ocaml-dev
#brew install clang-omp

# establish alternatives for
#   clang
#sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$ver 60
#sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$ver 60
#   clang tools
#sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$ver 60
#sudo update-alternatives --install /usr/bin/clang-check clang-check /usr/bin/clang-check-$ver 60
#sudo update-alternatives --install /usr/bin/clang-query clang-query /usr/bin/clang-query-$ver 60
##sudo update-alternatives --install /usr/bin/clang-rename clang-rename /usr/bin/clang-rename-$ver 60
#sudo update-alternatives --install /usr/bin/clang-tblgen clang-tblgen /usr/bin/clang-tblgen-$ver 60
#sudo update-alternatives --install /usr/bin/clang-apply-replacements clang-apply-replacements /usr/bin/clang-apply-replacements-$ver 60
#   clang-format
#sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-$ver 60
#sudo update-alternatives --install /usr/bin/clang-format-diff clang-format-diff /usr/bin/clang-format-diff-$ver 60
#   clang-modernize
#sudo update-alternatives --install /usr/bin/clang-modernize clang-modernize /usr/bin/clang-modernize-$ver 60
#   lldb
#sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-$ver 60
#sudo update-alternatives --install /usr/bin/lldb-mi lldb-mi /usr/bin/lldb-mi-$ver 60
#sudo update-alternatives --install /usr/bin/lldb-server lldb-server /usr/bin/lldb-server-$ver 60

# additional cpp syntax checkers
brew install cppcheck

# tags
#brew install ctags
brew install --with-jansson --HEAD universal-ctags/universal-ctags/universal-ctags

# Under some circumstances, emacs and ctags can conflict. By default,
# emacs provides an executable `ctags` that would conflict with the
# executable of the same name that ctags provides. To prevent this,
# Homebrew removes the emacs `ctags` and its manpage before linking.
#
# However, if you install emacs with the `--keep-ctags` option, then
# the `ctags` emacs provides will not be removed. In that case, you
# won't be able to install ctags successfully. It will build but not
# link

brew install rtags

#- brew install emacs
# To have launchd start emacs now and restart at login:
#   brew services start emacs
# Or, if you don't want/need a background service you can just run:
#   emacs

#- brew install llvm
# To use the bundled libc++ please add the following LDFLAGS:
#   LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
#
# This formula is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
#
# If you need to have this software first in your PATH run:
#   echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.zshrc
#
# For compilers to find this software you may need to set:
#     LDFLAGS:  -L/usr/local/opt/llvm/lib
#     CPPFLAGS: -I/usr/local/opt/llvm/include

#- brew isntall rtags
# To have launchd start rtags now and restart at login:
#   brew services start rtags
# Or, if you don't want/need a background service you can just run:
#   /usr/local/bin/rdm --verbose --inactivity-timeout=300 --log-file=/usr/local/var/log/rtags.log
#
# Emacs Lisp files have been installed to:
#   /usr/local/share/emacs/site-lisp/rtags

# cscope
brew install cscope

# codequery
brew install codequery

# cgrep
brew install cgrep

# cppformt
brew install cppformat

# conan - dependency manager
brew install conan

# check - a unit tester
brew install check

# infer
brew install infer

# cleanup
brew cleanup


